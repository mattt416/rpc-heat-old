heat_template_version: 2013-05-23

parameters:
  image:
    type: string
    label: Image name or ID
    description: Image to be used for compute instance
    default: a3ba4cf5-70b9-4805-afa2-30d1ab81a625

  flavor:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used
    default: performance1-8

  key_name:
    type: string
    label: Key name
    description: Name of key-pair to be used for compute instance
    default: default

  git_repo:
    type: string
    label: RPC git repo
    description: URL of RPC git repo to clone
    default: https://github.com/stackforge/os-ansible-deployment.git

  rpc_version:
    type: string
    label: RPC version
    description: RPC version to install
    default: master

  cluster_prefix:
    type: string
    label: Cluster prefix
    description: Prefix to use when building cluster
    default: heat
    constraints:
      # The recommended hostname length should be less than 20 chars, we tack
      # on -nodeX which adds up to another 5 chars, hence max being 14.
      - length: { min: 1, max: 14 }

  ansible_playbooks:
    type: string
    label: Ansible playbooks
    description: Ansible playbooks to run (all => all, minimal => (all - logging/support playbooks)
    default: all
    constraints:
      - allowed_values: [ all, minimal ]

  rackspace_cloud_api_key:
    type: string
    label: Rackspace Cloud API Key
    description: Rackspace Cloud API Key
    default: SomeAPIKey

  rackspace_cloud_auth_url:
    type: string
    label: Rackspace Cloud Auth URL
    description: Rackspace Cloud Auth URL
    default: https://identity.api.rackspacecloud.com/v2.0

  rackspace_cloud_password:
    type: string
    label: Rackspace Cloud Password
    description: Rackspace Cloud Password
    default: SomeUsersPassword
    hidden: True

  rackspace_cloud_tenant_id:
    type: string
    label: Rackspace Cloud Tenant ID
    description: Rackspace Cloud Tenant ID
    default: SomeTenantID

  rackspace_cloud_username:
    type: string
    label: Rackspace Cloud Username
    description: Rackspace Cloud Username
    default: SomeUserName

  glance_default_store:
    type: string
    label: Glance Default Store
    description: The storage backend to configure glance with
    default: swift
    constraints:
      - allowed_values: [ swift, file ]

  glance_swift_store_region:
    type: string
    label: Glance Swift Store Region
    description: The swift region to store glance images in
    default: LON
    constraints:
      - allowed_values: [ DFW, HKG, IAD, LON, ORD, SYD ]

resources:
  heat_mgmt_vxlan:
    type: Rackspace::Cloud::Network
    properties:
      cidr: 172.29.236.0/22
      label: heat_mgmt_vxlan

  heat_tunnel:
    type: Rackspace::Cloud::Network
    properties:
      cidr: 172.29.240.0/22
      label: heat_tunnel

  heat_storage:
    type: Rackspace::Cloud::Network
    properties:
      cidr: 172.29.228.0/22
      label: heat_storage

  wch1:
    type: "AWS::CloudFormation::WaitConditionHandle"

  wc1:
    type: "AWS::CloudFormation::WaitCondition"
    properties:
      Handle: { get_resource: wch1 }
      Count: 1
      Timeout: 10800

  controller1:
    type: "OS::Nova::Server"
    # Don't build controller1 until the others are up as the ansible run
    # will fail if they are down.
    depends_on: [ controller2, controller3, compute1, compute2 ]
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      name:
        str_replace:
          template: "%%CLUSTER_PREFIX%%-node1"
          params:
            "%%CLUSTER_PREFIX%%": { get_param: cluster_prefix }
      networks:
        - uuid: 00000000-0000-0000-0000-000000000000
        - uuid: 11111111-1111-1111-1111-111111111111
        - uuid: { get_resource: heat_mgmt_vxlan }
        - uuid: { get_resource: heat_tunnel }
        - uuid: { get_resource: heat_storage }
      config_drive: True
      user_data_format: RAW
      user_data:
        str_replace:
          template: { get_file: config_controller_primary.sh }
          params:
            "%%ID%%": "1"
            "%%RPC_VERSION%%": { get_param: rpc_version }
            "%%EXTERNAL_VIP_IP%%": { get_attr: [controller3, accessIPv4] }
            "%%PRIVATE_KEY%%": { get_file: id_rsa }
            "%%PUBLIC_KEY%%": { get_file: id_rsa.pub }
            "%%CLUSTER_PREFIX%%": { get_param: cluster_prefix }
            "%%ANSIBLE_PLAYBOOKS%%": { get_param: ansible_playbooks }
            "%%GIT_REPO%%": { get_param: git_repo }
            "%%RACKSPACE_CLOUD_API_KEY%%": { get_param: rackspace_cloud_api_key }
            "%%RACKSPACE_CLOUD_AUTH_URL%%": { get_param: rackspace_cloud_auth_url }
            "%%RACKSPACE_CLOUD_PASSWORD%%": { get_param: rackspace_cloud_password }
            "%%RACKSPACE_CLOUD_TENANT_ID%%": { get_param: rackspace_cloud_tenant_id }
            "%%RACKSPACE_CLOUD_USERNAME%%": { get_param: rackspace_cloud_username }
            "%%GLANCE_DEFAULT_STORE%%": { get_param: glance_default_store }
            "%%GLANCE_SWIFT_STORE_REGION%%": { get_param: glance_swift_store_region }
            "%%SIGNAL%%": { get_attr: [wch1, endpoint] }

  wch2:
    type: "AWS::CloudFormation::WaitConditionHandle"

  wc2:
    type: "AWS::CloudFormation::WaitCondition"
    properties:
      Handle: { get_resource: wch2 }
      Count: 1
      Timeout: 10800

  controller2:
    type: "OS::Nova::Server"
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      name:
        str_replace:
          template: "%%CLUSTER_PREFIX%%-node2"
          params:
            "%%CLUSTER_PREFIX%%": { get_param: cluster_prefix }
      networks:
        - uuid: 00000000-0000-0000-0000-000000000000
        - uuid: 11111111-1111-1111-1111-111111111111
        - uuid: { get_resource: heat_mgmt_vxlan }
        - uuid: { get_resource: heat_tunnel }
        - uuid: { get_resource: heat_storage }
      config_drive: True
      user_data_format: RAW
      user_data:
        str_replace:
          template: { get_file: config_controller_other.sh }
          params:
            "%%ID%%": "2"
            "%%PUBLIC_KEY%%": { get_file: id_rsa.pub }
            "%%CLUSTER_PREFIX%%": { get_param: cluster_prefix }
            "%%SIGNAL%%": { get_attr: [wch2, endpoint] }

  wch3:
    type: "AWS::CloudFormation::WaitConditionHandle"

  wc3:
    type: "AWS::CloudFormation::WaitCondition"
    properties:
      Handle: { get_resource: wch3 }
      Count: 1
      Timeout: 10800

  controller3:
    type: "OS::Nova::Server"
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      name:
        str_replace:
          template: "%%CLUSTER_PREFIX%%-node3"
          params:
            "%%CLUSTER_PREFIX%%": { get_param: cluster_prefix }
      networks:
        - uuid: 00000000-0000-0000-0000-000000000000
        - uuid: 11111111-1111-1111-1111-111111111111
        - uuid: { get_resource: heat_mgmt_vxlan }
        - uuid: { get_resource: heat_tunnel }
        - uuid: { get_resource: heat_storage }
      config_drive: True
      user_data_format: RAW
      user_data:
        str_replace:
          template: { get_file: config_controller_other.sh }
          params:
            "%%ID%%": "3"
            "%%PUBLIC_KEY%%": { get_file: id_rsa.pub }
            "%%CLUSTER_PREFIX%%": { get_param: cluster_prefix }
            "%%SIGNAL%%": { get_attr: [wch3, endpoint] }

  wch4:
    type: "AWS::CloudFormation::WaitConditionHandle"

  wc4:
    type: "AWS::CloudFormation::WaitCondition"
    properties:
      Handle: { get_resource: wch4 }
      Count: 1
      Timeout: 10800

  compute1:
    type: "OS::Nova::Server"
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      name:
        str_replace:
          template: "%%CLUSTER_PREFIX%%-node4"
          params:
            "%%CLUSTER_PREFIX%%": { get_param: cluster_prefix }
      networks:
        - uuid: 00000000-0000-0000-0000-000000000000
        - uuid: 11111111-1111-1111-1111-111111111111
        - uuid: { get_resource: heat_mgmt_vxlan }
        - uuid: { get_resource: heat_tunnel }
        - uuid: { get_resource: heat_storage }
      config_drive: True
      user_data_format: RAW
      user_data:
        str_replace:
          template: { get_file: config_compute_all.sh }
          params:
            "%%ID%%": "4"
            "%%PUBLIC_KEY%%": { get_file: id_rsa.pub }
            "%%CLUSTER_PREFIX%%": { get_param: cluster_prefix }
            "%%SIGNAL%%": { get_attr: [wch4, endpoint] }

  wch5:
    type: "AWS::CloudFormation::WaitConditionHandle"

  wc5:
    type: "AWS::CloudFormation::WaitCondition"
    properties:
      Handle: { get_resource: wch5 }
      Count: 1
      Timeout: 10800

  compute2:
    type: "OS::Nova::Server"
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      name:
        str_replace:
          template: "%%CLUSTER_PREFIX%%-node5"
          params:
            "%%CLUSTER_PREFIX%%": { get_param: cluster_prefix }
      networks:
        - uuid: 00000000-0000-0000-0000-000000000000
        - uuid: 11111111-1111-1111-1111-111111111111
        - uuid: { get_resource: heat_mgmt_vxlan }
        - uuid: { get_resource: heat_tunnel }
        - uuid: { get_resource: heat_storage }
      config_drive: True
      user_data_format: RAW
      user_data:
        str_replace:
          template: { get_file: config_compute_all.sh }
          params:
            "%%ID%%": "5"
            "%%PUBLIC_KEY%%": { get_file: id_rsa.pub }
            "%%CLUSTER_PREFIX%%": { get_param: cluster_prefix }
            "%%SIGNAL%%": { get_attr: [wch5, endpoint] }

outputs:
  controller1_ip:
    description: The IP address of controller1
    value: { get_attr: [controller1, accessIPv4] }
  controller2_ip:
    description: The IP address of controller2
    value: { get_attr: [controller2, accessIPv4] }
  controller3_ip:
    description: The IP address of controller3
    value: { get_attr: [controller3, accessIPv4] }
  compute1_ip:
    description: The IP address of compute1
    value: { get_attr: [compute1, accessIPv4] }
  compute2_ip:
    description: The IP address of compute2
    value: { get_attr: [compute2, accessIPv4] }
